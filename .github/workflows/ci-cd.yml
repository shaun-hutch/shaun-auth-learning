name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Limit to one concurrent deployment
concurrency:
  group: "auth-learning-pipeline"
  cancel-in-progress: true

env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: auth-learning-api
  TF_WORKSPACE: production

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore ./backend/backend-api/BackendApi.csproj

      - name: Build
        run: dotnet build ./backend/backend-api/BackendApi.csproj --no-restore

      - name: Test
        run: dotnet test ./backend/tests/BackendApi.Tests.csproj --no-build --verbosity normal

  build-and-push-image:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Run on main branch pushes and manual triggers
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      # Ensure ECR repository exists before attempting to push
      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" --region ${{ env.AWS_REGION }}

      - name: Show ECR repository URI
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR repository URI: $ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Generate HTTPS dev cert
        run: mkdir -p ./https && dotnet dev-certs https -ep ./https/aspnetapp.pfx -p ${{ secrets.CERT_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/backend-api
          platforms: linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  terraform:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Get ECR image details
        id: ecr-details
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          REPO_URI="$ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}"
          echo "repo_uri=$REPO_URI" >> "$GITHUB_OUTPUT"
          echo "image_tag=${{ github.sha }}" >> "$GITHUB_OUTPUT"

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan -no-color \
          -var="ecr_image_uri=${{ steps.ecr-details.outputs.repo_uri }}:${{ steps.ecr-details.outputs.image_tag }}"
        continue-on-error: true

      - name: Terraform Apply
        working-directory: ./terraform
        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'
        run: |
          terraform apply -auto-approve \
          -var="ecr_image_uri=${{ steps.ecr-details.outputs.repo_uri }}:${{ steps.ecr-details.outputs.image_tag }}"